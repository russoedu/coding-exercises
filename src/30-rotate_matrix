/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify matrix in-place instead.
 */
function rotate(matrix) {
  var N = matrix.length;
  const lastIndex = N - 1
  var layer = 0;

  // Layer loop (start with the outer layer and enter one by one until we reach the centre of the matrix)
  while(lastIndex > layer){
    // Rotation loop (rotate 4 items, starting by the corners of the square (layer index and last index), moving one position at a time)
    for(let y = layer; y < lastIndex - layer; y++){
      // Rotate
                         [matrix[y][lastIndex - layer], matrix[lastIndex - layer][lastIndex - y], matrix[lastIndex - y][layer], matrix[layer][y]] =
      [matrix[layer][y],  matrix[y][lastIndex - layer], matrix[lastIndex - layer][lastIndex - y], matrix[lastIndex - y][layer]];
    }
    layer++;
  }
};

/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify matrix in-place instead.
 */
function rotateTransRev(matrix) {
  for (let i = 0; i < matrix.length; i++) {
    for (let j = i; j < matrix[0].length; j++) {
      [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]]
    }
  }

  //reverse
  for (let i = 0; i < matrix.length; i++) {
    for (let j = 0; j < matrix.length/2; j++) {
      [matrix[i][j], matrix[i][matrix.length - 1 - j]] = [matrix[i][matrix.length - 1 - j], matrix[i][j]]
    }
  }
}

const matrix = [
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
]
const matrix2 = [
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
]
rotateTransRev(matrix)
rotate(matrix2)

for (let i = 0; i < matrix[0].length; i ++) {
  console.log(matrix[i])
}
for (let i = 0; i < matrix[0].length; i ++) {
  console.log(matrix2[i])
}
